
AVRASM ver. 2.1.30  C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm Sat May 13 19:33:59 2023

C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1422): warning: Register r3 already defined by the .DEF directive
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1423): warning: Register r2 already defined by the .DEF directive
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1424): warning: Register r5 already defined by the .DEF directive
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1425): warning: Register r4 already defined by the .DEF directive
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1426): warning: Register r7 already defined by the .DEF directive
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1427): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0072 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0114 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 00e2 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00ff 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000047 6425
000048 0020
000049 6f52
00004a 7573      	.DB  0x25,0x64,0x20,0x0,0x52,0x6F,0x73,0x75
00004b 4100
00004c 626c
00004d 7361
00004e 7274      	.DB  0x0,0x41,0x6C,0x62,0x61,0x73,0x74,0x72
00004f 0075
000050 6556
000051 6472
000052 0065      	.DB  0x75,0x0,0x56,0x65,0x72,0x64,0x65,0x0
000053 6147
000054 626c
000055 6e65
000056 4d00      	.DB  0x47,0x61,0x6C,0x62,0x65,0x6E,0x0,0x4D
000057 766f
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1484): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x6F,0x76,0x0
                 _0x2040060:
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1486): warning: .cseg .db misalignment - padding zero byte
000059 0001      	.DB  0x1
                 _0x2040000:
00005a 4e2d
00005b 4e41
00005c 4900
00005d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\simio\Downloads\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare_update\proiect_2_o_prima_incercare\cc1.asm(1489): warning: .cseg .db misalignment - padding zero byte
00005e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005f 0005      	.DW  0x05
000060 0200      	.DW  _0x32
000061 0092      	.DW  _0x0*2+4
                 
000062 0009      	.DW  0x09
000063 0205      	.DW  _0x32+5
000064 0097      	.DW  _0x0*2+9
                 
000065 0006      	.DW  0x06
000066 020e      	.DW  _0x32+14
000067 00a0      	.DW  _0x0*2+18
                 
000068 0007      	.DW  0x07
000069 0214      	.DW  _0x32+20
00006a 00a6      	.DW  _0x0*2+24
                 
00006b 0004      	.DW  0x04
00006c 021b      	.DW  _0x32+27
00006d 00ad      	.DW  _0x0*2+31
                 
00006e 0001      	.DW  0x01
00006f 022f      	.DW  __seed_G102
000070 00b2      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000071 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000072 94f8      	CLI
000073 27ee      	CLR  R30
000074 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000075 e0f1      	LDI  R31,1
000076 bff5      	OUT  MCUCR,R31
000077 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000078 e1f8      	LDI  R31,0x18
000079 95a8      	WDR
00007a b7a4      	IN   R26,MCUSR
00007b 7fa7      	CBR  R26,8
00007c bfa4      	OUT  MCUSR,R26
00007d 93f0 0060 	STS  WDTCSR,R31
00007f 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000081 e08d      	LDI  R24,(14-2)+1
000082 e0a2      	LDI  R26,2
000083 27bb      	CLR  R27
                 __CLEAR_REG:
000084 93ed      	ST   X+,R30
000085 958a      	DEC  R24
000086 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000087 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000088 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000089 e0a0      	LDI  R26,LOW(__SRAM_START)
00008a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008b 93ed      	ST   X+,R30
00008c 9701      	SBIW R24,1
00008d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008e ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000090 9185      	LPM  R24,Z+
000091 9195      	LPM  R25,Z+
000092 9700      	SBIW R24,0
000093 f061      	BREQ __GLOBAL_INI_END
000094 91a5      	LPM  R26,Z+
000095 91b5      	LPM  R27,Z+
000096 9005      	LPM  R0,Z+
000097 9015      	LPM  R1,Z+
000098 01bf      	MOVW R22,R30
000099 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009a 9005      	LPM  R0,Z+
00009b 920d      	ST   X+,R0
00009c 9701      	SBIW R24,1
00009d f7e1      	BRNE __GLOBAL_INI_LOOP
00009e 01fb      	MOVW R30,R22
00009f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
0000a0 e0e0      	LDI  R30,__GPIOR0_INIT
0000a1 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
0000a2 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
0000a3 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a5 bfed      	OUT  SPL,R30
0000a6 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a9 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000aa 940c 0154 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x01
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _LCD_send_command:
                 ; .FSTART _LCD_send_command
0000ac d19a      	RCALL SUBOPT_0x0
                 ;	cmnd -> Y+0
0000ad 985c      	CBI  0xB,4
0000ae c002      	RJMP _0x20A0002
                 ; .FEND
                 _LCD_send_data:
                 ; .FSTART _LCD_send_data
0000af d197      	RCALL SUBOPT_0x0
                 ;	data -> Y+0
0000b0 9a5c      	SBI  0xB,4
                 _0x20A0002:
0000b1 9a5e      	SBI  0xB,6
                +
0000b2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000b3 958a     +DEC R24
0000b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000b5 985e      	CBI  0xB,6
                +
0000b6 ef84     +LDI R24 , LOW ( 500 )
0000b7 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
0000b8 9701     +SBIW R24 , 1
0000b9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
0000ba 9621      	ADIW R28,1
0000bb 9508      	RET
                 ; .FEND
                 _LCD_init:
                 ; .FSTART _LCD_init
0000bc e0aa      	LDI  R26,LOW(10)
0000bd e0b0      	LDI  R27,0
0000be d1fe      	RCALL _delay_ms
0000bf e3a8      	LDI  R26,LOW(56)
0000c0 dfeb      	RCALL _LCD_send_command
0000c1 e0ae      	LDI  R26,LOW(14)
0000c2 dfe9      	RCALL _LCD_send_command
0000c3 e0a1      	LDI  R26,LOW(1)
0000c4 dfe7      	RCALL _LCD_send_command
0000c5 e0aa      	LDI  R26,LOW(10)
0000c6 e0b0      	LDI  R27,0
0000c7 d1f5      	RCALL _delay_ms
0000c8 e0a6      	LDI  R26,LOW(6)
0000c9 dfe2      	RCALL _LCD_send_command
0000ca 9508      	RET
                 ; .FEND
                 ;	y -> Y+5
                 ;	x -> Y+4
                 ;	firstAddress -> Y+0
                 _LCD_print:
                 ; .FSTART _LCD_print
0000cb 93ba      	ST   -Y,R27
0000cc 93aa      	ST   -Y,R26
                 ;	*string -> Y+0
                 _0x3:
0000cd 81a8      	LD   R26,Y
0000ce 81b9      	LDD  R27,Y+1
0000cf 91ac      	LD   R26,X
0000d0 30a1      	CPI  R26,LOW(0x1)
0000d1 f044      	BRLT _0x5
0000d2 81a8      	LD   R26,Y
0000d3 81b9      	LDD  R27,Y+1
0000d4 91ed      	LD   R30,X+
0000d5 83a8      	ST   Y,R26
0000d6 83b9      	STD  Y+1,R27
0000d7 2fae      	MOV  R26,R30
0000d8 dfd6      	RCALL _LCD_send_data
0000d9 cff3      	RJMP _0x3
                 _0x5:
0000da 940c 0245 	JMP  _0x20A0001
                 ; .FEND
                 _LCD_clear:
                 ; .FSTART _LCD_clear
0000dc e0a1      	LDI  R26,LOW(1)
0000dd dfce      	RCALL _LCD_send_command
0000de e6a4      	LDI  R26,LOW(100)
0000df e0b0      	LDI  R27,0
0000e0 d1dc      	RCALL _delay_ms
0000e1 9508      	RET
                 ; .FEND
                 ;interrupt [21] void usart0_rx_isr(void)
                 ; 0000 0046 {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0000e2 d169      	RCALL SUBOPT_0x1
                 ; 0000 0047 char status,data;
                 ; 0000 0048 status=UCSR0A;
0000e3 931a      	ST   -Y,R17
0000e4 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000e5 9110 00c0 	LDS  R17,192
                 ; 0000 0049 data=UDR0;
0000e7 9100 00c6 	LDS  R16,198
                 ; 0000 004A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000e9 2fe1      	MOV  R30,R17
0000ea 71ec      	ANDI R30,LOW(0x1C)
0000eb f481      	BRNE _0x6
                 ; 0000 004B {
                 ; 0000 004C rx_buffer0[rx_wr_index0++]=data;
0000ec 2de3      	MOV  R30,R3
0000ed 9433      	INC  R3
0000ee e0f0      	LDI  R31,0
0000ef 5ee1      	SUBI R30,LOW(-_rx_buffer0)
0000f0 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0000f1 8300      	ST   Z,R16
                 ; 0000 004D #if RX_BUFFER_SIZE0 == 256
                 ; 0000 004E // special case for receiver buffer size=256
                 ; 0000 004F if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0050 #else
                 ; 0000 0051 if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000f2 e0e8      	LDI  R30,LOW(8)
0000f3 15e3      	CP   R30,R3
0000f4 f409      	BRNE _0x7
0000f5 2433      	CLR  R3
                 ; 0000 0052 if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x7:
0000f6 9453      	INC  R5
0000f7 e0e8      	LDI  R30,LOW(8)
0000f8 15e5      	CP   R30,R5
0000f9 f411      	BRNE _0x8
                 ; 0000 0053 {
                 ; 0000 0054 rx_counter0=0;
0000fa 2455      	CLR  R5
                 ; 0000 0055 rx_buffer_overflow0=1;
0000fb 9af0      	SBI  0x1E,0
                 ; 0000 0056 }
                 ; 0000 0057 #endif
                 ; 0000 0058 }
                 _0x8:
                 ; 0000 0059 }
                 _0x6:
0000fc 9109      	LD   R16,Y+
0000fd 9119      	LD   R17,Y+
0000fe c010      	RJMP _0x3A
                 ; .FEND
                 ;char getchar(void)
                 ; 0000 0060 {
                 ; 0000 0061 char data;
                 ; 0000 0062 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0063 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0064 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0065 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0066 #endif
                 ; 0000 0067 #asm("cli")
                 ; 0000 0068 --rx_counter0;
                 ; 0000 0069 #asm("sei")
                 ; 0000 006A return data;
                 ; 0000 006B }
                 ;interrupt [23] void usart0_tx_isr(void)
                 ; 0000 007B {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0000ff d14c      	RCALL SUBOPT_0x1
                 ; 0000 007C if (tx_counter0)
000100 2066      	TST  R6
000101 f069      	BREQ _0xF
                 ; 0000 007D {
                 ; 0000 007E --tx_counter0;
000102 946a      	DEC  R6
                 ; 0000 007F UDR0=tx_buffer0[tx_rd_index0++];
000103 2de7      	MOV  R30,R7
000104 9473      	INC  R7
000105 e0f0      	LDI  R31,0
000106 5de9      	SUBI R30,LOW(-_tx_buffer0)
000107 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000108 81e0      	LD   R30,Z
000109 93e0 00c6 	STS  198,R30
                 ; 0000 0080 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0081 if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00010b e0e8      	LDI  R30,LOW(8)
00010c 15e7      	CP   R30,R7
00010d f409      	BRNE _0x10
00010e 2477      	CLR  R7
                 ; 0000 0082 #endif
                 ; 0000 0083 }
                 _0x10:
                 ; 0000 0084 }
                 _0xF:
                 _0x3A:
00010f 91e9      	LD   R30,Y+
000110 bfef      	OUT  SREG,R30
000111 91f9      	LD   R31,Y+
000112 91e9      	LD   R30,Y+
000113 9518      	RETI
                 ; .FEND
                 ;void putchar(char c)
                 ; 0000 008B {
                 ; 0000 008C while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 ; 0000 008D #asm("cli")
                 ; 0000 008E if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 008F {
                 ; 0000 0090 tx_buffer0[tx_wr_index0++]=c;
                 ; 0000 0091 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0092 if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 0093 #endif
                 ; 0000 0094 ++tx_counter0;
                 ; 0000 0095 }
                 ; 0000 0096 else
                 ; 0000 0097 UDR0=c;
                 ; 0000 0098 #asm("sei")
                 ; 0000 0099 }
                 ;interrupt [14] void timer1_compa_isr(void)
                 ; 0000 00A6 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00A7 LED1 = ~LED1; // invert LED
000114 9b5e      	SBIS 0xB,6
000115 c002      	RJMP _0x19
000116 985e      	CBI  0xB,6
000117 c001      	RJMP _0x1A
                 _0x19:
000118 9a5e      	SBI  0xB,6
                 _0x1A:
                 ; 0000 00A8 }
000119 9518      	RETI
                 ; .FEND
                 ;void blink(int n){
                 ; 0000 00A9 void blink(int n){
                 ; 0000 00AA LED1=1;
                 ;	n -> Y+0
                 ; 0000 00AB delay_ms(n);
                 ; 0000 00AC LED1=0;
                 ; 0000 00AD delay_ms(n);
                 ; 0000 00AE }
                 ;void aprindere(int n)
                 ; 0000 00B0 {
                 ; 0000 00B1 n-=48;
                 ;	n -> Y+0
                 ; 0000 00B2 while(n){
                 ; 0000 00B3 blink(500);
                 ; 0000 00B4 n--;
                 ; 0000 00B5 }
                 ; 0000 00B6 
                 ; 0000 00B7 }
                 ;void ADC_read()
                 ; 0000 00D4 {
                 ; 0000 00D5 
                 ; 0000 00D6 ADMUX = 0x60; // referinta este AVCC cu capacitor extern la AREF pin
                 ; 0000 00D7 ADCSRA = 0x87; // activare ADC, setare divizor prescaler la 128
                 ; 0000 00D8 ADCSRA |= 0x40; // incepere conversie
                 ; 0000 00D9 while (ADCSRA == 0xC0); // asteptare finalizare conversie
                 ; 0000 00DA printf("%d ",ADCH);
                 ; 0000 00DB }
                 ;int* random_generator(int lower, int upper, int count)
                 ; 0000 00DE {
                 _random_generator:
                 ; .FSTART _random_generator
                 ; 0000 00DF int i=0;
                 ; 0000 00E0 int *v;
                 ; 0000 00E1 v=(int*) malloc(count * sizeof(int));
00011a 93ba      	ST   -Y,R27
00011b 93aa      	ST   -Y,R26
00011c d151      	RCALL __SAVELOCR4
                 ;	lower -> Y+8
                 ;	upper -> Y+6
                 ;	count -> Y+4
                 ;	i -> R16,R17
                 ;	*v -> R18,R19
                +
00011d e000     +LDI R16 , LOW ( 0 )
00011e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00011f 81ec      	LDD  R30,Y+4
000120 81fd      	LDD  R31,Y+4+1
000121 0fee      	LSL  R30
000122 1fff      	ROL  R31
000123 01df      	MOVW R26,R30
000124 d118      	RCALL _malloc
000125 019f      	MOVW R18,R30
                 ; 0000 00E2 for(i=0; i<count; i++){
                +
000126 e000     +LDI R16 , LOW ( 0 )
000127 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x26:
000128 81ec      	LDD  R30,Y+4
000129 81fd      	LDD  R31,Y+4+1
00012a 170e      	CP   R16,R30
00012b 071f      	CPC  R17,R31
00012c f504      	BRGE _0x27
                 ; 0000 00E3 int num = (rand() %(upper - lower + 1)) + lower;
                 ; 0000 00E4 v[i]=num;
00012d 9722      	SBIW R28,2
                 ;	lower -> Y+10
                 ;	upper -> Y+8
                 ;	count -> Y+6
                 ;	num -> Y+0
00012e d0f6      	RCALL _rand
00012f 010f      	MOVW R0,R30
000130 85aa      	LDD  R26,Y+10
000131 85bb      	LDD  R27,Y+10+1
000132 85e8      	LDD  R30,Y+8
000133 85f9      	LDD  R31,Y+8+1
000134 1bea      	SUB  R30,R26
000135 0bfb      	SBC  R31,R27
000136 9631      	ADIW R30,1
000137 01d0      	MOVW R26,R0
000138 d176      	RCALL __MODW21
000139 85aa      	LDD  R26,Y+10
00013a 85bb      	LDD  R27,Y+10+1
00013b 0fea      	ADD  R30,R26
00013c 1ffb      	ADC  R31,R27
00013d 83e8      	ST   Y,R30
00013e 83f9      	STD  Y+1,R31
00013f 01f8      	MOVW R30,R16
000140 01d9      	MOVW R26,R18
000141 0fee      	LSL  R30
000142 1fff      	ROL  R31
000143 0fea      	ADD  R30,R26
000144 1ffb      	ADC  R31,R27
000145 81a8      	LD   R26,Y
000146 81b9      	LDD  R27,Y+1
000147 83a0      	STD  Z+0,R26
000148 83b1      	STD  Z+1,R27
                 ; 0000 00E5 }
000149 9622      	ADIW R28,2
                +
00014a 5f0f     +SUBI R16 , LOW ( - 1 )
00014b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00014c cfdb      	RJMP _0x26
                 _0x27:
                 ; 0000 00E6 
                 ; 0000 00E7 return v;
00014d 01f9      	MOVW R30,R18
00014e d124      	RCALL __LOADLOCR4
00014f 962a      	ADIW R28,10
000150 9508      	RET
                 ; 0000 00E8 }
                 ; .FEND
                 ;char *inttochar(int n){
                 ; 0000 00EA char *inttochar(int n){
                 _inttochar:
                 ; .FSTART _inttochar
                 ; 0000 00EB 
                 ; 0000 00EC return (char*) n;
000151 d0ff      	RCALL SUBOPT_0x2
                 ;	n -> Y+0
000152 940c 0245 	JMP  _0x20A0001
                 ; 0000 00ED }
                 ; .FEND
                 ;void main (void)
                 ; 0000 00EF {
                 _main:
                 ; .FSTART _main
                 ; 0000 00F0 
                 ; 0000 00F1 int i=0;
                 ; 0000 00F2 int cnt=3;
                 ; 0000 00F3 int j=0;
                 ; 0000 00F4 int* random;
                 ; 0000 00F5 srand(3);
000154 9722      	SBIW R28,2
                 ;	i -> R16,R17
                 ;	cnt -> R18,R19
                 ;	j -> R20,R21
                 ;	*random -> Y+0
                +
000155 e000     +LDI R16 , LOW ( 0 )
000156 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000157 e023     +LDI R18 , LOW ( 3 )
000158 e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                +
000159 e040     +LDI R20 , LOW ( 0 )
00015a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00015b e0a3      	LDI  R26,LOW(3)
00015c e0b0      	LDI  R27,0
00015d d0c0      	RCALL _srand
                 ; 0000 00F6 
                 ; 0000 00F7 Init_initController();  // this must be the first "init" action/call!
00015e d057      	RCALL _Init_initController
                 ; 0000 00F8 #asm("sei")             // enable interrupts
00015f 9478      	SEI
                 ; 0000 00F9 //LED1 = 0;           	// initial state, will be changed by timer 1
                 ; 0000 00FA CNTRL_DDR = 0xFF;
000160 efef      	LDI  R30,LOW(255)
000161 b9ea      	OUT  0xA,R30
                 ; 0000 00FB CNTRL_PORT = 0x00;
000162 e0e0      	LDI  R30,LOW(0)
000163 b9eb      	OUT  0xB,R30
                 ; 0000 00FC DATA_DDR = 0xFF;
000164 efef      	LDI  R30,LOW(255)
000165 b9e4      	OUT  0x4,R30
                 ; 0000 00FD DATA_PORT = 0x00;
000166 e0e0      	LDI  R30,LOW(0)
000167 b9e5      	OUT  0x5,R30
                 ; 0000 00FE 
                 ; 0000 00FF LCD_init();
000168 df53      	RCALL _LCD_init
                 ; 0000 0100 LCD_clear();
000169 df72      	RCALL _LCD_clear
                 ; 0000 0101 
                 ; 0000 0102 //	LCD_goto(1,2);
                 ; 0000 0103 
                 ; 0000 0104 delay_ms(1000);
00016a eea8      	LDI  R26,LOW(1000)
00016b e0b3      	LDI  R27,HIGH(1000)
00016c d150      	RCALL _delay_ms
                 ; 0000 0105 while(1){
                 _0x28:
                 ; 0000 0106 // random=(int*)malloc(cnt * sizeof(int));
                 ; 0000 0107 random = random_generator(0,4, cnt);
00016d e0e0      	LDI  R30,LOW(0)
00016e e0f0      	LDI  R31,HIGH(0)
00016f 93fa      	ST   -Y,R31
000170 93ea      	ST   -Y,R30
000171 e0e4      	LDI  R30,LOW(4)
000172 e0f0      	LDI  R31,HIGH(4)
000173 93fa      	ST   -Y,R31
000174 93ea      	ST   -Y,R30
000175 01d9      	MOVW R26,R18
000176 dfa3      	RCALL _random_generator
000177 83e8      	ST   Y,R30
000178 83f9      	STD  Y+1,R31
                 ; 0000 0108 for(i=0; i<cnt; i++){
                +
000179 e000     +LDI R16 , LOW ( 0 )
00017a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2C:
                +
00017b 1702     +CP R16 , R18
00017c 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
00017d f574      	BRGE _0x2D
                 ; 0000 0109 switch (random[i])
00017e d0d7      	RCALL SUBOPT_0x3
                 ; 0000 010A {
                 ; 0000 010B case 1:
00017f 30e1      	CPI  R30,LOW(0x1)
000180 e0a0      	LDI  R26,HIGH(0x1)
000181 07fa      	CPC  R31,R26
000182 f419      	BRNE _0x31
                 ; 0000 010C LCD_print("Rosu");
                +
000183 e0a0     +LDI R26 , LOW ( _0x32 + ( 0 ) )
000184 e0b2     +LDI R27 , HIGH ( _0x32 + ( 0 ) )
                 	__POINTW2MN _0x32,0
000185 c01e      	RJMP _0x39
                 ; 0000 010D delay_ms(1000);
                 ; 0000 010E break;
                 ; 0000 010F 
                 ; 0000 0110 case 2:
                 _0x31:
000186 30e2      	CPI  R30,LOW(0x2)
000187 e0a0      	LDI  R26,HIGH(0x2)
000188 07fa      	CPC  R31,R26
000189 f419      	BRNE _0x33
                 ; 0000 0111 LCD_print("Albastru");
                +
00018a e0a5     +LDI R26 , LOW ( _0x32 + ( 5 ) )
00018b e0b2     +LDI R27 , HIGH ( _0x32 + ( 5 ) )
                 	__POINTW2MN _0x32,5
00018c c017      	RJMP _0x39
                 ; 0000 0112 delay_ms(1000);
                 ; 0000 0113 break;
                 ; 0000 0114 case 3:
                 _0x33:
00018d 30e3      	CPI  R30,LOW(0x3)
00018e e0a0      	LDI  R26,HIGH(0x3)
00018f 07fa      	CPC  R31,R26
000190 f419      	BRNE _0x34
                 ; 0000 0115 LCD_print("Verde");
                +
000191 e0ae     +LDI R26 , LOW ( _0x32 + ( 14 ) )
000192 e0b2     +LDI R27 , HIGH ( _0x32 + ( 14 ) )
                 	__POINTW2MN _0x32,14
000193 c010      	RJMP _0x39
                 ; 0000 0116 delay_ms(1000);
                 ; 0000 0117 break;
                 ; 0000 0118 case 4:
                 _0x34:
000194 30e4      	CPI  R30,LOW(0x4)
000195 e0a0      	LDI  R26,HIGH(0x4)
000196 07fa      	CPC  R31,R26
000197 f419      	BRNE _0x35
                 ; 0000 0119 LCD_print("Galben");
                +
000198 e1a4     +LDI R26 , LOW ( _0x32 + ( 20 ) )
000199 e0b2     +LDI R27 , HIGH ( _0x32 + ( 20 ) )
                 	__POINTW2MN _0x32,20
00019a c009      	RJMP _0x39
                 ; 0000 011A delay_ms(1000);
                 ; 0000 011B break;
                 ; 0000 011C 
                 ; 0000 011D case 0:
                 _0x35:
00019b 9730      	SBIW R30,0
00019c f419      	BRNE _0x37
                 ; 0000 011E LCD_print("Mov");
                +
00019d e1ab     +LDI R26 , LOW ( _0x32 + ( 27 ) )
00019e e0b2     +LDI R27 , HIGH ( _0x32 + ( 27 ) )
                 	__POINTW2MN _0x32,27
00019f c004      	RJMP _0x39
                 ; 0000 011F delay_ms(1000);
                 ; 0000 0120 break;
                 ; 0000 0121 default:
                 _0x37:
                 ; 0000 0122 LCD_print(inttochar(random[i]));
0001a0 d0b5      	RCALL SUBOPT_0x3
0001a1 01df      	MOVW R26,R30
0001a2 dfae      	RCALL _inttochar
0001a3 01df      	MOVW R26,R30
                 _0x39:
0001a4 df26      	RCALL _LCD_print
                 ; 0000 0123 delay_ms(1000);
0001a5 eea8      	LDI  R26,LOW(1000)
0001a6 e0b3      	LDI  R27,HIGH(1000)
0001a7 d115      	RCALL _delay_ms
                 ; 0000 0124 break;
                 ; 0000 0125 }
                 ; 0000 0126 LCD_clear();
0001a8 df33      	RCALL _LCD_clear
                 ; 0000 0127 }
                +
0001a9 5f0f     +SUBI R16 , LOW ( - 1 )
0001aa 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001ab cfcf      	RJMP _0x2C
                 _0x2D:
                 ; 0000 0128 delay_ms(5000);
0001ac e8a8      	LDI  R26,LOW(5000)
0001ad e1b3      	LDI  R27,HIGH(5000)
0001ae d10e      	RCALL _delay_ms
                 ; 0000 0129 cnt++;
                +
0001af 5f2f     +SUBI R18 , LOW ( - 1 )
0001b0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 012A free(random);
0001b1 81a8      	LD   R26,Y
0001b2 81b9      	LDD  R27,Y+1
0001b3 d08b      	RCALL _free
                 ; 0000 012B }
0001b4 cfb8      	RJMP _0x28
                 ; 0000 012C 
                 ; 0000 012D 
                 ; 0000 012E 
                 ; 0000 012F }
                 _0x38:
0001b5 cfff      	RJMP _0x38
                 ; .FEND
                 
                 	.DSEG
                 _0x32:
000200           	.BYTE 0x1F
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
0001b6 e8e0      	LDI  R30,LOW(128)
0001b7 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 
                 ; 0001 0015 
                 ; 0001 0016 //adc initialization
                 ; 0001 0017 
                 ; 0001 0018 
                 ; 0001 0019 
                 ; 0001 001A // Input/Output Ports initialization
                 ; 0001 001B // Port A initialization
                 ; 0001 001C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 001D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 001E PORTA=0x00;
0001bc b9e2      	OUT  0x2,R30
                 ; 0001 001F DDRA=0x00;
0001bd b9e1      	OUT  0x1,R30
                 ; 0001 0020 
                 ; 0001 0021 // Port B initialization
                 ; 0001 0022 PORTB=0x00;
0001be b9e5      	OUT  0x5,R30
                 ; 0001 0023 DDRB=0x00;
0001bf b9e4      	OUT  0x4,R30
                 ; 0001 0024 
                 ; 0001 0025 // Port C initialization
                 ; 0001 0026 PORTC=0x00;
0001c0 b9e8      	OUT  0x8,R30
                 ; 0001 0027 DDRC=0x00;
0001c1 b9e7      	OUT  0x7,R30
                 ; 0001 0028 
                 ; 0001 0029 // Port D initialization
                 ; 0001 002A PORTD=0b00100000; // D.5 needs pull-up resistor
0001c2 e2e0      	LDI  R30,LOW(32)
0001c3 b9eb      	OUT  0xB,R30
                 ; 0001 002B DDRD= 0b01010000; // D.6 is LED, D.4 is test output
0001c4 e5e0      	LDI  R30,LOW(80)
0001c5 b9ea      	OUT  0xA,R30
                 ; 0001 002C 
                 ; 0001 002D // Timer/Counter 0 initialization
                 ; 0001 002E // Clock source: System Clock
                 ; 0001 002F // Clock value: Timer 0 Stopped
                 ; 0001 0030 // Mode: Normal top=FFh
                 ; 0001 0031 // OC0 output: Disconnected
                 ; 0001 0032 TCCR0A=0x00;
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 bde4      	OUT  0x24,R30
                 ; 0001 0033 TCCR0B=0x00;
0001c8 bde5      	OUT  0x25,R30
                 ; 0001 0034 TCNT0=0x00;
0001c9 bde6      	OUT  0x26,R30
                 ; 0001 0035 OCR0A=0x00;
0001ca bde7      	OUT  0x27,R30
                 ; 0001 0036 OCR0B=0x00;
0001cb bde8      	OUT  0x28,R30
                 ; 0001 0037 
                 ; 0001 0038 // Timer/Counter 1 initialization
                 ; 0001 0039 // Clock source: System Clock
                 ; 0001 003A // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 003B // Mode: CTC top=OCR1A
                 ; 0001 003C // OC1A output: Discon.
                 ; 0001 003D // OC1B output: Discon.
                 ; 0001 003E // Noise Canceler: Off
                 ; 0001 003F // Input Capture on Falling Edge
                 ; 0001 0040 // Timer 1 Overflow Interrupt: Off
                 ; 0001 0041 // Input Capture Interrupt: Off
                 ; 0001 0042 // Compare A Match Interrupt: On
                 ; 0001 0043 // Compare B Match Interrupt: Off
                 ; 0001 0044 
                 ; 0001 0045 TCCR1A=0x00;
0001cc 93e0 0080 	STS  128,R30
                 ; 0001 0046 TCCR1B=0x0D;
0001ce e0ed      	LDI  R30,LOW(13)
0001cf 93e0 0081 	STS  129,R30
                 ; 0001 0047 TCNT1H=0x00;
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 93e0 0085 	STS  133,R30
                 ; 0001 0048 TCNT1L=0x00;
0001d4 93e0 0084 	STS  132,R30
                 ; 0001 0049 ICR1H=0x00;
0001d6 93e0 0087 	STS  135,R30
                 ; 0001 004A ICR1L=0x00;
0001d8 93e0 0086 	STS  134,R30
                 ; 0001 004B 
                 ; 0001 004C // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 004D // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 004E OCR1AH=0x4C;
0001da e4ec      	LDI  R30,LOW(76)
0001db 93e0 0089 	STS  137,R30
                 ; 0001 004F OCR1AL=0x40;
0001dd e4e0      	LDI  R30,LOW(64)
0001de 93e0 0088 	STS  136,R30
                 ; 0001 0050 
                 ; 0001 0051 OCR1BH=0x00;
0001e0 e0e0      	LDI  R30,LOW(0)
0001e1 93e0 008b 	STS  139,R30
                 ; 0001 0052 OCR1BL=0x00;
0001e3 93e0 008a 	STS  138,R30
                 ; 0001 0053 
                 ; 0001 0054 // Timer/Counter 2 initialization
                 ; 0001 0055 // Clock source: System Clock
                 ; 0001 0056 // Clock value: Timer2 Stopped
                 ; 0001 0057 // Mode: Normal top=0xFF
                 ; 0001 0058 // OC2A output: Disconnected
                 ; 0001 0059 // OC2B output: Disconnected
                 ; 0001 005A ASSR=0x00;
0001e5 93e0 00b6 	STS  182,R30
                 ; 0001 005B TCCR2A=0x00;
0001e7 93e0 00b0 	STS  176,R30
                 ; 0001 005C TCCR2B=0x00;
0001e9 93e0 00b1 	STS  177,R30
                 ; 0001 005D TCNT2=0x00;
0001eb 93e0 00b2 	STS  178,R30
                 ; 0001 005E OCR2A=0x00;
0001ed 93e0 00b3 	STS  179,R30
                 ; 0001 005F OCR2B=0x00;
0001ef 93e0 00b4 	STS  180,R30
                 ; 0001 0060 
                 ; 0001 0061 // External Interrupt(s) initialization
                 ; 0001 0062 // INT0: Off
                 ; 0001 0063 // INT1: Off
                 ; 0001 0064 // INT2: Off
                 ; 0001 0065 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0066 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0067 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0068 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0069 EICRA=0x00;
0001f1 93e0 0069 	STS  105,R30
                 ; 0001 006A EIMSK=0x00;
0001f3 bbed      	OUT  0x1D,R30
                 ; 0001 006B PCICR=0x00;
0001f4 93e0 0068 	STS  104,R30
                 ; 0001 006C 
                 ; 0001 006D // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 006E TIMSK0=0x00;
0001f6 93e0 006e 	STS  110,R30
                 ; 0001 006F TIMSK1=0x02;
0001f8 e0e2      	LDI  R30,LOW(2)
0001f9 93e0 006f 	STS  111,R30
                 ; 0001 0070 TIMSK2=0x00;
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 93e0 0070 	STS  112,R30
                 ; 0001 0071 
                 ; 0001 0072 // USART0 initialization
                 ; 0001 0073 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0074 // USART0 Receiver: On
                 ; 0001 0075 // USART0 Transmitter: On
                 ; 0001 0076 // USART0 Mode: Asynchronous
                 ; 0001 0077 // USART0 Baud rate: 9600
                 ; 0001 0078 UCSR0A=0x00;
0001fe 93e0 00c0 	STS  192,R30
                 ; 0001 0079 UCSR0B=0xD8;
000200 ede8      	LDI  R30,LOW(216)
000201 93e0 00c1 	STS  193,R30
                 ; 0001 007A UCSR0C=0x06;
000203 e0e6      	LDI  R30,LOW(6)
000204 93e0 00c2 	STS  194,R30
                 ; 0001 007B UBRR0H=0x00;
000206 e0e0      	LDI  R30,LOW(0)
000207 93e0 00c5 	STS  197,R30
                 ; 0001 007C UBRR0L=0x81;
000209 e8e1      	LDI  R30,LOW(129)
00020a 93e0 00c4 	STS  196,R30
                 ; 0001 007D 
                 ; 0001 007E // USART1 initialization
                 ; 0001 007F // USART1 disabled
                 ; 0001 0080 UCSR1B=0x00;
00020c e0e0      	LDI  R30,LOW(0)
00020d 93e0 00c9 	STS  201,R30
                 ; 0001 0081 
                 ; 0001 0082 
                 ; 0001 0083 // Analog Comparator initialization
                 ; 0001 0084 // Analog Comparator: Off
                 ; 0001 0085 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0086 ACSR=0x80;
00020f e8e0      	LDI  R30,LOW(128)
000210 bfe0      	OUT  0x30,R30
                 ; 0001 0087 ADCSRB=0x00;
000211 e0e0      	LDI  R30,LOW(0)
000212 93e0 007b 	STS  123,R30
                 ; 0001 0088 DIDR1=0x00;
000214 93e0 007f 	STS  127,R30
                 ; 0001 0089 
                 ; 0001 008A // Watchdog Timer initialization
                 ; 0001 008B // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 008C #pragma optsize-
                 ; 0001 008D #asm("wdr")
000216 95a8      	WDR
                 ; 0001 008E // Write 2 consecutive values to enable watchdog
                 ; 0001 008F // this is NOT a mistake !
                 ; 0001 0090 WDTCSR=0x18;
000217 e1e8      	LDI  R30,LOW(24)
000218 93e0 0060 	STS  96,R30
                 ; 0001 0091 WDTCSR=0x08;
00021a e0e8      	LDI  R30,LOW(8)
00021b 93e0 0060 	STS  96,R30
                 ; 0001 0092 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0093 #pragma optsize+
                 ; 0001 0094 #endif
                 ; 0001 0095 
                 ; 0001 0096 }
00021d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _srand:
                 ; .FSTART _srand
00021e d032      	RCALL SUBOPT_0x2
                +
00021f 2f6f     +MOV R22 , R31
000220 0f66     +ADD R22 , R22
000221 0b66     +SBC R22 , R22
000222 2f76     +MOV R23 , R22
                 	__CWD1
000223 d03c      	RCALL SUBOPT_0x4
000224 c020      	RJMP _0x20A0001
                 ; .FEND
                 _rand:
                 ; .FSTART _rand
000225 91e0 022f 	LDS  R30,__seed_G102
000227 91f0 0230 	LDS  R31,__seed_G102+1
000229 9160 0231 	LDS  R22,__seed_G102+2
00022b 9170 0232 	LDS  R23,__seed_G102+3
                +
00022d e6ad     +LDI R26 , LOW ( 0x41C64E6D )
00022e e4be     +LDI R27 , HIGH ( 0x41C64E6D )
00022f ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
000230 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
000231 d04a      	RCALL __MULD12U
                +
000232 59ee     +SUBI R30 , LOW ( - 30562 )
000233 48f8     +SBCI R31 , HIGH ( - 30562 )
000234 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
000235 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
000236 d029      	RCALL SUBOPT_0x4
000237 01fb      	movw r30,r22
000238 77ff      	andi r31,0x7F
000239 9508      	RET
                 ; .FEND
                 _realloc:
                 ; .FSTART _realloc
00023a d02e      	RCALL SUBOPT_0x5
00023b 9624      	ADIW R28,4
00023c 9508      	RET
                 ; .FEND
                 _malloc:
                 ; .FSTART _malloc
00023d d02b      	RCALL SUBOPT_0x5
00023e c006      	RJMP _0x20A0001
                 ; .FEND
                 _free:
                 ; .FSTART _free
00023f d011      	RCALL SUBOPT_0x2
000240 93fa      	ST   -Y,R31
000241 93ea      	ST   -Y,R30
000242 e0a0      	LDI  R26,LOW(0)
000243 e0b0      	LDI  R27,0
000244 dff5      	RCALL _realloc
                 _0x20A0001:
000245 9622      	ADIW R28,2
000246 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
00021f           	.BYTE 0x8
                 _tx_buffer0:
000227           	.BYTE 0x8
                 __seed_G102:
00022f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000247 93aa      	ST   -Y,R26
000248 81e8      	LD   R30,Y
000249 b9e5      	OUT  0x5,R30
00024a 985d      	CBI  0xB,5
00024b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00024c 93ea      	ST   -Y,R30
00024d 93fa      	ST   -Y,R31
00024e b7ef      	IN   R30,SREG
00024f 93ea      	ST   -Y,R30
000250 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000251 93ba      	ST   -Y,R27
000252 93aa      	ST   -Y,R26
000253 81e8      	LD   R30,Y
000254 81f9      	LDD  R31,Y+1
000255 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000256 01f8      	MOVW R30,R16
000257 81a8      	LD   R26,Y
000258 81b9      	LDD  R27,Y+1
000259 0fee      	LSL  R30
00025a 1fff      	ROL  R31
00025b 0fae      	ADD  R26,R30
00025c 1fbf      	ADC  R27,R31
00025d 91ed      	LD   R30,X+
00025e 91fd      	LD   R31,X+
00025f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000260 93e0 022f 	STS  __seed_G102,R30
000262 93f0 0230 	STS  __seed_G102+1,R31
000264 9360 0231 	STS  __seed_G102+2,R22
000266 9370 0232 	STS  __seed_G102+3,R23
000268 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000269 93ba      	ST   -Y,R27
00026a 93aa      	ST   -Y,R26
00026b e0e0      	LDI  R30,LOW(0)
00026c e0f0      	LDI  R31,HIGH(0)
00026d 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
00026e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00026f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000270 931a      	ST   -Y,R17
000271 930a      	ST   -Y,R16
000272 9508      	RET
                 
                 __LOADLOCR4:
000273 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000274 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000275 8119      	LDD  R17,Y+1
000276 8108      	LD   R16,Y
000277 9508      	RET
                 
                 __ANEGW1:
000278 95f1      	NEG  R31
000279 95e1      	NEG  R30
00027a 40f0      	SBCI R31,0
00027b 9508      	RET
                 
                 __MULD12U:
00027c 9f7a      	MUL  R23,R26
00027d 2d70      	MOV  R23,R0
00027e 9f6b      	MUL  R22,R27
00027f 0d70      	ADD  R23,R0
000280 9ff8      	MUL  R31,R24
000281 0d70      	ADD  R23,R0
000282 9fe9      	MUL  R30,R25
000283 0d70      	ADD  R23,R0
000284 9f6a      	MUL  R22,R26
000285 2d60      	MOV  R22,R0
000286 0d71      	ADD  R23,R1
000287 9ffb      	MUL  R31,R27
000288 0d60      	ADD  R22,R0
000289 1d71      	ADC  R23,R1
00028a 9fe8      	MUL  R30,R24
00028b 0d60      	ADD  R22,R0
00028c 1d71      	ADC  R23,R1
00028d 2788      	CLR  R24
00028e 9ffa      	MUL  R31,R26
00028f 2df0      	MOV  R31,R0
000290 0d61      	ADD  R22,R1
000291 1f78      	ADC  R23,R24
000292 9feb      	MUL  R30,R27
000293 0df0      	ADD  R31,R0
000294 1d61      	ADC  R22,R1
000295 1f78      	ADC  R23,R24
000296 9fea      	MUL  R30,R26
000297 2de0      	MOV  R30,R0
000298 0df1      	ADD  R31,R1
000299 1f68      	ADC  R22,R24
00029a 1f78      	ADC  R23,R24
00029b 9508      	RET
                 
                 __DIVW21U:
00029c 2400      	CLR  R0
00029d 2411      	CLR  R1
00029e e190      	LDI  R25,16
                 __DIVW21U1:
00029f 0faa      	LSL  R26
0002a0 1fbb      	ROL  R27
0002a1 1c00      	ROL  R0
0002a2 1c11      	ROL  R1
0002a3 1a0e      	SUB  R0,R30
0002a4 0a1f      	SBC  R1,R31
0002a5 f418      	BRCC __DIVW21U2
0002a6 0e0e      	ADD  R0,R30
0002a7 1e1f      	ADC  R1,R31
0002a8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002a9 60a1      	SBR  R26,1
                 __DIVW21U3:
0002aa 959a      	DEC  R25
0002ab f799      	BRNE __DIVW21U1
0002ac 01fd      	MOVW R30,R26
0002ad 01d0      	MOVW R26,R0
0002ae 9508      	RET
                 
                 __MODW21:
0002af 94e8      	CLT
0002b0 ffb7      	SBRS R27,7
0002b1 c004      	RJMP __MODW211
0002b2 95b1      	NEG  R27
0002b3 95a1      	NEG  R26
0002b4 40b0      	SBCI R27,0
0002b5 9468      	SET
                 __MODW211:
0002b6 fdf7      	SBRC R31,7
0002b7 dfc0      	RCALL __ANEGW1
0002b8 dfe3      	RCALL __DIVW21U
0002b9 01fd      	MOVW R30,R26
0002ba f40e      	BRTC __MODW212
0002bb dfbc      	RCALL __ANEGW1
                 __MODW212:
0002bc 9508      	RET
                 
                 _delay_ms:
0002bd 9610      	adiw r26,0
0002be f039      	breq __delay_ms1
                 __delay_ms0:
0002bf 95a8      	wdr
                +
0002c0 e888     +LDI R24 , LOW ( 0x1388 )
0002c1 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
0002c2 9701     +SBIW R24 , 1
0002c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0002c4 9711      	sbiw r26,1
0002c5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002c6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  21 r1 :  11 r2 :   0 r3 :   4 r4 :   0 r5 :   3 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  14 r18:   9 r19:   5 r20:   1 r21:   1 r22:  20 r23:  15 
r24:  21 r25:   8 r26:  72 r27:  41 r28:   8 r29:   1 r30: 168 r31:  52 
x  :   7 y  :  62 z  :  11 
Registers used: 25 out of 35 (71.4%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  14 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   4 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   6 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  34 ld    :  18 ldd   :  19 ldi   : 108 
lds   :   6 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  10 movw  :  18 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   0 out   :  30 pop   :   0 push  :   0 rcall :  44 ret   :  21 
reti  :   2 rjmp  :  19 rol   :   6 ror   :   0 sbc   :   3 sbci  :  10 
sbi   :   4 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   5 sts   :  40 sub   :   2 subi  :   6 swap  :   0 
tst   :   1 wdr   :   3 
Instructions used: 55 out of 116 (47.4%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00058e   1318    104   1422   16384   8.7%
[.dseg] 0x000100 0x000233      0     51     51    1024   5.0%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
